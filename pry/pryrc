# Presentation. Colour defaults.
Pry.color = true
Pry.config.color = true

# If we're inside EMACS, we don't want paging or indentation support.
if ENV['INSIDE_EMACS']
  Pry.config.correct_indent = false
  Pry.config.pager = false
end
Pry.config.editor = ENV['VISUAL']

# Save history, and configure an <ENTER> with no input as run thge last command.
Pry.config.history_save = true
Pry::Commands.command /^$/, "repeat last command" do
  _pry_.run_command Pry.history.to_a.last
end

# Alias to match GDB abbreviations.
Pry.commands.alias_command 'c', 'continue' rescue nil
Pry.commands.alias_command 's', 'step' rescue nil
Pry.commands.alias_command 'n', 'next' rescue nil
Pry.commands.alias_command 'f', 'finish' rescue nil
Pry.commands.alias_command 'bt', 'backtrace' rescue nil
Pry.commands.alias_command 'r!', 'reload!' rescue nil


def formatted_env
  case Rails.env
  when 'production'
    bold_upcased_env = Pry::Helpers::Text.bold(Rails.env.upcase)
    Pry::Helpers::Text.red(bold_upcased_env)
  when 'staging'
    Pry::Helpers::Text.yellow(Rails.env)
  when 'development'
    Pry::Helpers::Text.green(Rails.env)
  else
    Rails.env
  end
end

def app_name
  File.basename(Rails.root)
end

# Change the font it we're in RAILS to a RAILS specific prompt.
if defined?(Rails)
  Pry.config.prompt = proc { |obj, nest_level, _| "[#{app_name}][#{formatted_env}] #{obj}:#{nest_level}> " }
end

# == PLUGINS ===
# amazing_print gem: great syntax colorized printing
begin
  $LOAD_PATH << "~/.gem/ruby/2.7.1/gems/amazing_print-1.2.0/lib"
  require  "amazing_print"
  AmazingPrint.pry!
rescue LoadError => err
  puts "gem install amazing_print  # <-- highly recommended"
end

# === CUSTOM COMMANDS ===
# from: https://gist.github.com/1297510
default_command_set = Pry::CommandSet.new do
  command "copy", "Copy argument to the clip-board" do |str|
     IO.popen('pbcopy', 'w') { |f| f << str.to_s }
  end

  # Print a backtrace with only project frames (no gems or framework)
  command "sbt", "Sane (project only) backtrace" do
    gems_paths = (Gem.path | [Gem.default_dir]).map { |p| Regexp.escape(p) }
    gems_regexp = %r{(#{gems_paths.join('|')})/(bundler/)?gems/([^/]+)-([\w.]+)/(.*)}

    elided = 0
    caller.each do |c|
      if c.match(gems_regexp)
        elided = elided + 1
      else
        if elided != 0
          p = elided > 1 ? "frames" : "frame"
          puts "(elided #{elided} non-project #{p})".gray
          elided = 0
        end
        ss = c.split(":")
        print ss[0].red
        print ":" + ss[1].green + ":"
        puts ss[2].blue
      end
    end
  end

  # Clear the screen.
  command "clear" do
    system "clear"
    if ENV["RAILS_ENV"]
      output.puts "Rails Environment: " + ENV['RAILS_ENV']
    end
  end

  # Send SQL over ActiveRecord
  command "sql", "Send sql over ActiveRecord." do |query|
    if ENV['RAILS_ENV'] || defined?(Rails)
      pp ActiveRecord::Base.connection.select_all(query)
    else
      pp "No rails env defined"
    end
  end

  command "caller_method" do |depth|
    depth = depth.to_i || 1
    if /^(.+?):(\d+)(?::in `(.*)')?/ =~ caller(depth+1).first
      file   = Regexp.last_match[1]
      line   = Regexp.last_match[2].to_i
      method = Regexp.last_match[3]
      output.puts "file: #{file}:"
      output.puts "   method/line: #{method}:#{line}"
    end
  end
end

Pry.config.commands.import default_command_set

# Inform Readline when the window resizes
old_winch = trap 'WINCH' do
  if `stty size` =~ /\A(\d+) (\d+)\n\z/
    Readline.set_screen_size $1.to_i, $2.to_i
  end
  old_winch.call unless old_winch.nil? || old_winch == 'SYSTEM_DEFAULT'
end

# Hooks
org_logger_active_record = nil
org_logger_rails = nil
Pry.hooks.add_hook :before_session, :rails do |output, target, pry|
  if defined?(Rails) && Rails.env
    # output all other log info such as deprecation warnings to the console
    if Rails.respond_to? :logger=
      org_logger_rails = Rails.logger
      Rails.logger = Logger.new STDOUT
    end

    # load Rails console commands
    if Rails::VERSION::MAJOR >= 3
      require 'rails/console/app'
      require 'rails/console/helpers'
      if Rails.const_defined? :ConsoleMethods
        extend Rails::ConsoleMethods
      end
    else
      require 'console_app'
      require 'console_with_helpers'
    end
  end
end

Pry.hooks.add_hook :after_session, :rails do |output, target, pry|
  ActiveRecord::Base.logger = org_logger_active_record if org_logger_active_record
  Rails.logger = org_logger_rails if org_logger_rails
end
